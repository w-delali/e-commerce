// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  password               String
  role                   Role       @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  addresses              Address[]
  cartItems              CartItem[]
  order                  Order[]

  @@map("users")
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Decimal
  tags         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cartItems    CartItem[]
  orderProduct orderProduct[]

  @@map("products")
}

model Address {
  id        Int      @id @default(autoincrement())
  lineOne   String
  lineTwo   String
  city      String
  pinCode   String
  country   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  netAmount    Decimal
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderProduct orderProduct[]
  orderEvent   OrderEvent[]

  @@map("orders")
}

model orderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  PREPARING
  OUT_FOR_DELIVERY
  ARRIVED
  DELIVERED
  CANCELLED
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}
